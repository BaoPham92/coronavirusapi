<p id="notice"><%= notice %></p>

<h2>Coronavirus (COVID-19) US State Data Tracking Project</h2>

<h3>Record of official data from US government websites for the 50 states and DC.
	All data provided here are direct crawls of state government websites. These
	are the officially reported numbers. Unlike other coronavirus data sites, we do not rely on
	news or human crowd-sourced data. These are automatic captures of official state websites.
	Todo is to certify this data on the blockchain.
	(All websites last crawled: <%= @updated_date %>)</h3>

<h4><a href="mailto:dbyang@gmail.com">Contact</a> for more info, or if you want to contribute to the project. 
</h4>

<h4>To donate crypto, see the donation addresses at the bottom of the page. Thanks!
</h4>

<table class="pretty" border="1">
  <thead>
    <tr>
      <th>Tested</th>
      <th>Positive</th>
      <th>Deaths</th>
    </tr>
  </thead>
  <tbody>
      <tr>
        <td><%= @tested %></td>
        <td><%= @positive %></td>
        <td><%= @deaths %></td>
      </tr>
  </tbody>
</table>

<div class="container">
	<h5>US Cases by State</h5>


  <div id="us-map-container"> </div>
  <script>
      function getJsonByUrl(url, callback){
          // read text from URL location
          var request = new XMLHttpRequest();
          request.open('GET', url, true);
          request.send(null);
          request.onreadystatechange = function () {
              if (request.readyState === 4 && request.status === 200) {
                  var type = request.getResponseHeader('Content-Type');

                  try {
                      callback(JSON.parse(request.responseText));
                  }catch(err) {
                      callback(err);
                  }
              }
          }
      }

      // size map based on container size to keep it responsive
      var margin = {top: 10, left: 10, bottom: 10, right: 10}
          , width = d3.select('#us-map-container').node().getBoundingClientRect().width
          , width = width - margin.left - margin.right
          , mapRatio = .5
          , height = width * mapRatio;

      var projection = d3.geoAlbersUsa()
          .scale(width)
          .translate([width / 2, height / 2]);

      var path = d3.geoPath()
          .projection(projection);

      var svg = d3.select('#us-map-container')
          .append('svg')
          .attr('width', width)
          .attr('height', height);

      var caseMapUSA = svg.append('g');

      getJsonByUrl("data/states-10m.json", function(states_json) {
          console.log(states_json);
          var geojson = topojson.feature(states_json, states_json.objects.states);
          console.log(geojson);
          projection.fitSize([width, height], geojson);
          caseMapUSA.selectAll('path')
              .data(geojson.features)
              .enter()
              .append('path')
              .attr('fill', '#ccc')
              .attr('d', path);


      });

      d3.select(window).on('resize', resize);
      function resize() {
          // Resize the map when the window size changes
          width = d3.select('#us-map-container').node().getBoundingClientRect().width;
          width = width - margin.left - margin.right;
          height = width * mapRatio;
          console.log(width);
          console.log(height);
          // update projection
          projection
              .translate([width / 2, height / 2])
              .scale(width);


          // resize the map container
          svg
              .style('width', width + 'px')
              .style('height', height + 'px');

          // resize the map
          caseMapUSA.selectAll('path').attr('d', path);
      }




  </script>

	<h5>Total number tested over time (note the spike was due to previous test numbers
		being available):</h5>
  <%= line_chart @chart_tested, curve: false, xtitle: "Date", points: false, thousands: "," %>
</div>
<div class="container">
  <h5>Total positive cases over time:</h5>
  <%= line_chart @chart_pos, curve: false, xtitle: "Date", points: false, thousands: "," %>
</div>
<div class="container">
  <h5>Total deaths over time:</h5>
  <%= line_chart @chart_deaths, curve: false, xtitle: "Date", points: false, thousands: "," %>
</div>

<div class="container">
  <h5>Cases in top states over time:</h5>
  <%= line_chart @chart_states, {library: {elements: {line: {tension: 0}, point: {radius: 0}}, pointRadius: 0, legend: {position: 'right',}, scales: {yAxes: [{id: 'y-axis', type: 'logarithmic'},]}}} %>
</div>

<div class="container">
  <h5>Cases in top states normalized by population (1 million) over time:</h5>
  <%= line_chart @chart_states2, {library: {elements: {line: {tension: 0}, point: {radius: 0}}, pointRadius: 0, legend: {position: 'right',}, scales: {yAxes: [{id: 'y-axis', type: 'logarithmic'},]}}} %>
</div>

<h4>Latest data crawled for each state:</h4>

<table class="pretty" border="1">
  <thead>
    <tr>
      <th>Name</th>
      <th>Tested</th>
      <th>Positive</th>
      <th>Deaths</th>
    </tr>
  </thead>

  <tbody>

    <% @states.each do |state| %>
      <tr>
	      <td><a href="<%= state.positive_source %>"><%= state.name %></a></td>
        <td><%= state.tested %></td>
        <td><%= state.positive %></td>
        <td><%= state.deaths %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<h4>Download:</h4>
<a href="/states.csv">State data in csv format</a>
<br>
<a href="/time_series.csv">Time series in csv format</a>

<h4>Sources:</h4>
<table>
	<tbody>
		<% @sources.each do |s| %>
			<tr>
				<td><%= s %></td>
			</tr>
		<% end %>
	</tbody>
</table>

<h4>Donate:</h4>
<p>
BTC: 1LG9dUf39dCKAEFcKm6guNhadTJwNqj44J
</p><p>
BCH: qrf504gk8n6sujjegwastxqdz2lv5vlv65pxs03s7k
</p><p>
ETH: 0x549ffFB83ac67Ca1Ae47668ac3cAAE3e0c77a9bd
</p><p>
XLM: GCVRV67LBHTMVXKDAJSW3S3ASASI6EJWQU2LYEOGKPSJEY42PYRAUDME
</p>

